// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2024 19:54:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TEST_RISC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TEST_RISC_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TEST_RISC_vlg_check_tst (
	ALU_OP,
	ALU_SRC,
	EN_MEM,
	EN_REG,
	O,
	OUT_INS,
	PC,
	R0,
	R1,
	R2,
	R3,
	R4,
	R5,
	R6,
	R7,
	REG_SRC,
	SH_R_L,
	SHIFT_BIT,
	W_MEM,
	WR_SRC,
	ZERO,
	sampler_rx
);
input [2:0] ALU_OP;
input  ALU_SRC;
input  EN_MEM;
input  EN_REG;
input [15:0] O;
input [15:0] OUT_INS;
input  PC;
input [15:0] R0;
input [15:0] R1;
input [15:0] R2;
input [15:0] R3;
input [15:0] R4;
input [15:0] R5;
input [15:0] R6;
input [15:0] R7;
input  REG_SRC;
input  SH_R_L;
input [3:0] SHIFT_BIT;
input  W_MEM;
input  WR_SRC;
input  ZERO;
input sampler_rx;

reg [2:0] ALU_OP_expected;
reg  ALU_SRC_expected;
reg  EN_MEM_expected;
reg  EN_REG_expected;
reg [15:0] O_expected;
reg [15:0] OUT_INS_expected;
reg  PC_expected;
reg [15:0] R0_expected;
reg [15:0] R1_expected;
reg [15:0] R2_expected;
reg [15:0] R3_expected;
reg [15:0] R4_expected;
reg [15:0] R5_expected;
reg [15:0] R6_expected;
reg [15:0] R7_expected;
reg  REG_SRC_expected;
reg  SH_R_L_expected;
reg [3:0] SHIFT_BIT_expected;
reg  W_MEM_expected;
reg  WR_SRC_expected;
reg  ZERO_expected;

reg [2:0] ALU_OP_prev;
reg  ALU_SRC_prev;
reg  EN_MEM_prev;
reg  EN_REG_prev;
reg [15:0] O_prev;
reg [15:0] OUT_INS_prev;
reg  PC_prev;
reg [15:0] R0_prev;
reg [15:0] R1_prev;
reg [15:0] R2_prev;
reg [15:0] R3_prev;
reg [15:0] R4_prev;
reg [15:0] R5_prev;
reg [15:0] R6_prev;
reg [15:0] R7_prev;
reg  REG_SRC_prev;
reg  SH_R_L_prev;
reg [3:0] SHIFT_BIT_prev;
reg  W_MEM_prev;
reg  WR_SRC_prev;
reg  ZERO_prev;

reg [2:0] ALU_OP_expected_prev;
reg  ALU_SRC_expected_prev;
reg  EN_MEM_expected_prev;
reg  EN_REG_expected_prev;
reg [15:0] O_expected_prev;
reg [15:0] OUT_INS_expected_prev;
reg  PC_expected_prev;
reg [15:0] R0_expected_prev;
reg [15:0] R1_expected_prev;
reg [15:0] R2_expected_prev;
reg [15:0] R3_expected_prev;
reg [15:0] R4_expected_prev;
reg [15:0] R5_expected_prev;
reg [15:0] R6_expected_prev;
reg [15:0] R7_expected_prev;
reg  REG_SRC_expected_prev;
reg  SH_R_L_expected_prev;
reg [3:0] SHIFT_BIT_expected_prev;
reg  W_MEM_expected_prev;
reg  WR_SRC_expected_prev;
reg  ZERO_expected_prev;

reg [2:0] last_ALU_OP_exp;
reg  last_ALU_SRC_exp;
reg  last_EN_MEM_exp;
reg  last_EN_REG_exp;
reg [15:0] last_O_exp;
reg [15:0] last_OUT_INS_exp;
reg  last_PC_exp;
reg [15:0] last_R0_exp;
reg [15:0] last_R1_exp;
reg [15:0] last_R2_exp;
reg [15:0] last_R3_exp;
reg [15:0] last_R4_exp;
reg [15:0] last_R5_exp;
reg [15:0] last_R6_exp;
reg [15:0] last_R7_exp;
reg  last_REG_SRC_exp;
reg  last_SH_R_L_exp;
reg [3:0] last_SHIFT_BIT_exp;
reg  last_W_MEM_exp;
reg  last_WR_SRC_exp;
reg  last_ZERO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_OP_prev = ALU_OP;
	ALU_SRC_prev = ALU_SRC;
	EN_MEM_prev = EN_MEM;
	EN_REG_prev = EN_REG;
	O_prev = O;
	OUT_INS_prev = OUT_INS;
	PC_prev = PC;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	R4_prev = R4;
	R5_prev = R5;
	R6_prev = R6;
	R7_prev = R7;
	REG_SRC_prev = REG_SRC;
	SH_R_L_prev = SH_R_L;
	SHIFT_BIT_prev = SHIFT_BIT;
	W_MEM_prev = W_MEM;
	WR_SRC_prev = WR_SRC;
	ZERO_prev = ZERO;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_OP_expected_prev = ALU_OP_expected;
	ALU_SRC_expected_prev = ALU_SRC_expected;
	EN_MEM_expected_prev = EN_MEM_expected;
	EN_REG_expected_prev = EN_REG_expected;
	O_expected_prev = O_expected;
	OUT_INS_expected_prev = OUT_INS_expected;
	PC_expected_prev = PC_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	R4_expected_prev = R4_expected;
	R5_expected_prev = R5_expected;
	R6_expected_prev = R6_expected;
	R7_expected_prev = R7_expected;
	REG_SRC_expected_prev = REG_SRC_expected;
	SH_R_L_expected_prev = SH_R_L_expected;
	SHIFT_BIT_expected_prev = SHIFT_BIT_expected;
	W_MEM_expected_prev = W_MEM_expected;
	WR_SRC_expected_prev = WR_SRC_expected;
	ZERO_expected_prev = ZERO_expected;
end


// expected ALU_OP[ 2 ]
initial
begin
	ALU_OP_expected[2] = 1'bX;
end 
// expected ALU_OP[ 1 ]
initial
begin
	ALU_OP_expected[1] = 1'bX;
end 
// expected ALU_OP[ 0 ]
initial
begin
	ALU_OP_expected[0] = 1'bX;
end 

// expected ALU_SRC
initial
begin
	ALU_SRC_expected = 1'bX;
end 

// expected EN_MEM
initial
begin
	EN_MEM_expected = 1'bX;
end 

// expected EN_REG
initial
begin
	EN_REG_expected = 1'bX;
end 
// expected O[ 15 ]
initial
begin
	O_expected[15] = 1'bX;
end 
// expected O[ 14 ]
initial
begin
	O_expected[14] = 1'bX;
end 
// expected O[ 13 ]
initial
begin
	O_expected[13] = 1'bX;
end 
// expected O[ 12 ]
initial
begin
	O_expected[12] = 1'bX;
end 
// expected O[ 11 ]
initial
begin
	O_expected[11] = 1'bX;
end 
// expected O[ 10 ]
initial
begin
	O_expected[10] = 1'bX;
end 
// expected O[ 9 ]
initial
begin
	O_expected[9] = 1'bX;
end 
// expected O[ 8 ]
initial
begin
	O_expected[8] = 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 
// expected OUT_INS[ 15 ]
initial
begin
	OUT_INS_expected[15] = 1'bX;
end 
// expected OUT_INS[ 14 ]
initial
begin
	OUT_INS_expected[14] = 1'bX;
end 
// expected OUT_INS[ 13 ]
initial
begin
	OUT_INS_expected[13] = 1'bX;
end 
// expected OUT_INS[ 12 ]
initial
begin
	OUT_INS_expected[12] = 1'bX;
end 
// expected OUT_INS[ 11 ]
initial
begin
	OUT_INS_expected[11] = 1'bX;
end 
// expected OUT_INS[ 10 ]
initial
begin
	OUT_INS_expected[10] = 1'bX;
end 
// expected OUT_INS[ 9 ]
initial
begin
	OUT_INS_expected[9] = 1'bX;
end 
// expected OUT_INS[ 8 ]
initial
begin
	OUT_INS_expected[8] = 1'bX;
end 
// expected OUT_INS[ 7 ]
initial
begin
	OUT_INS_expected[7] = 1'bX;
end 
// expected OUT_INS[ 6 ]
initial
begin
	OUT_INS_expected[6] = 1'bX;
end 
// expected OUT_INS[ 5 ]
initial
begin
	OUT_INS_expected[5] = 1'bX;
end 
// expected OUT_INS[ 4 ]
initial
begin
	OUT_INS_expected[4] = 1'bX;
end 
// expected OUT_INS[ 3 ]
initial
begin
	OUT_INS_expected[3] = 1'bX;
end 
// expected OUT_INS[ 2 ]
initial
begin
	OUT_INS_expected[2] = 1'bX;
end 
// expected OUT_INS[ 1 ]
initial
begin
	OUT_INS_expected[1] = 1'bX;
end 
// expected OUT_INS[ 0 ]
initial
begin
	OUT_INS_expected[0] = 1'bX;
end 

// expected PC
initial
begin
	PC_expected = 1'bX;
end 
// expected R0[ 15 ]
initial
begin
	R0_expected[15] = 1'bX;
end 
// expected R0[ 14 ]
initial
begin
	R0_expected[14] = 1'bX;
end 
// expected R0[ 13 ]
initial
begin
	R0_expected[13] = 1'bX;
end 
// expected R0[ 12 ]
initial
begin
	R0_expected[12] = 1'bX;
end 
// expected R0[ 11 ]
initial
begin
	R0_expected[11] = 1'bX;
end 
// expected R0[ 10 ]
initial
begin
	R0_expected[10] = 1'bX;
end 
// expected R0[ 9 ]
initial
begin
	R0_expected[9] = 1'bX;
end 
// expected R0[ 8 ]
initial
begin
	R0_expected[8] = 1'bX;
end 
// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 15 ]
initial
begin
	R1_expected[15] = 1'bX;
end 
// expected R1[ 14 ]
initial
begin
	R1_expected[14] = 1'bX;
end 
// expected R1[ 13 ]
initial
begin
	R1_expected[13] = 1'bX;
end 
// expected R1[ 12 ]
initial
begin
	R1_expected[12] = 1'bX;
end 
// expected R1[ 11 ]
initial
begin
	R1_expected[11] = 1'bX;
end 
// expected R1[ 10 ]
initial
begin
	R1_expected[10] = 1'bX;
end 
// expected R1[ 9 ]
initial
begin
	R1_expected[9] = 1'bX;
end 
// expected R1[ 8 ]
initial
begin
	R1_expected[8] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 15 ]
initial
begin
	R2_expected[15] = 1'bX;
end 
// expected R2[ 14 ]
initial
begin
	R2_expected[14] = 1'bX;
end 
// expected R2[ 13 ]
initial
begin
	R2_expected[13] = 1'bX;
end 
// expected R2[ 12 ]
initial
begin
	R2_expected[12] = 1'bX;
end 
// expected R2[ 11 ]
initial
begin
	R2_expected[11] = 1'bX;
end 
// expected R2[ 10 ]
initial
begin
	R2_expected[10] = 1'bX;
end 
// expected R2[ 9 ]
initial
begin
	R2_expected[9] = 1'bX;
end 
// expected R2[ 8 ]
initial
begin
	R2_expected[8] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 15 ]
initial
begin
	R3_expected[15] = 1'bX;
end 
// expected R3[ 14 ]
initial
begin
	R3_expected[14] = 1'bX;
end 
// expected R3[ 13 ]
initial
begin
	R3_expected[13] = 1'bX;
end 
// expected R3[ 12 ]
initial
begin
	R3_expected[12] = 1'bX;
end 
// expected R3[ 11 ]
initial
begin
	R3_expected[11] = 1'bX;
end 
// expected R3[ 10 ]
initial
begin
	R3_expected[10] = 1'bX;
end 
// expected R3[ 9 ]
initial
begin
	R3_expected[9] = 1'bX;
end 
// expected R3[ 8 ]
initial
begin
	R3_expected[8] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 
// expected R4[ 15 ]
initial
begin
	R4_expected[15] = 1'bX;
end 
// expected R4[ 14 ]
initial
begin
	R4_expected[14] = 1'bX;
end 
// expected R4[ 13 ]
initial
begin
	R4_expected[13] = 1'bX;
end 
// expected R4[ 12 ]
initial
begin
	R4_expected[12] = 1'bX;
end 
// expected R4[ 11 ]
initial
begin
	R4_expected[11] = 1'bX;
end 
// expected R4[ 10 ]
initial
begin
	R4_expected[10] = 1'bX;
end 
// expected R4[ 9 ]
initial
begin
	R4_expected[9] = 1'bX;
end 
// expected R4[ 8 ]
initial
begin
	R4_expected[8] = 1'bX;
end 
// expected R4[ 7 ]
initial
begin
	R4_expected[7] = 1'bX;
end 
// expected R4[ 6 ]
initial
begin
	R4_expected[6] = 1'bX;
end 
// expected R4[ 5 ]
initial
begin
	R4_expected[5] = 1'bX;
end 
// expected R4[ 4 ]
initial
begin
	R4_expected[4] = 1'bX;
end 
// expected R4[ 3 ]
initial
begin
	R4_expected[3] = 1'bX;
end 
// expected R4[ 2 ]
initial
begin
	R4_expected[2] = 1'bX;
end 
// expected R4[ 1 ]
initial
begin
	R4_expected[1] = 1'bX;
end 
// expected R4[ 0 ]
initial
begin
	R4_expected[0] = 1'bX;
end 
// expected R5[ 15 ]
initial
begin
	R5_expected[15] = 1'bX;
end 
// expected R5[ 14 ]
initial
begin
	R5_expected[14] = 1'bX;
end 
// expected R5[ 13 ]
initial
begin
	R5_expected[13] = 1'bX;
end 
// expected R5[ 12 ]
initial
begin
	R5_expected[12] = 1'bX;
end 
// expected R5[ 11 ]
initial
begin
	R5_expected[11] = 1'bX;
end 
// expected R5[ 10 ]
initial
begin
	R5_expected[10] = 1'bX;
end 
// expected R5[ 9 ]
initial
begin
	R5_expected[9] = 1'bX;
end 
// expected R5[ 8 ]
initial
begin
	R5_expected[8] = 1'bX;
end 
// expected R5[ 7 ]
initial
begin
	R5_expected[7] = 1'bX;
end 
// expected R5[ 6 ]
initial
begin
	R5_expected[6] = 1'bX;
end 
// expected R5[ 5 ]
initial
begin
	R5_expected[5] = 1'bX;
end 
// expected R5[ 4 ]
initial
begin
	R5_expected[4] = 1'bX;
end 
// expected R5[ 3 ]
initial
begin
	R5_expected[3] = 1'bX;
end 
// expected R5[ 2 ]
initial
begin
	R5_expected[2] = 1'bX;
end 
// expected R5[ 1 ]
initial
begin
	R5_expected[1] = 1'bX;
end 
// expected R5[ 0 ]
initial
begin
	R5_expected[0] = 1'bX;
end 
// expected R6[ 15 ]
initial
begin
	R6_expected[15] = 1'bX;
end 
// expected R6[ 14 ]
initial
begin
	R6_expected[14] = 1'bX;
end 
// expected R6[ 13 ]
initial
begin
	R6_expected[13] = 1'bX;
end 
// expected R6[ 12 ]
initial
begin
	R6_expected[12] = 1'bX;
end 
// expected R6[ 11 ]
initial
begin
	R6_expected[11] = 1'bX;
end 
// expected R6[ 10 ]
initial
begin
	R6_expected[10] = 1'bX;
end 
// expected R6[ 9 ]
initial
begin
	R6_expected[9] = 1'bX;
end 
// expected R6[ 8 ]
initial
begin
	R6_expected[8] = 1'bX;
end 
// expected R6[ 7 ]
initial
begin
	R6_expected[7] = 1'bX;
end 
// expected R6[ 6 ]
initial
begin
	R6_expected[6] = 1'bX;
end 
// expected R6[ 5 ]
initial
begin
	R6_expected[5] = 1'bX;
end 
// expected R6[ 4 ]
initial
begin
	R6_expected[4] = 1'bX;
end 
// expected R6[ 3 ]
initial
begin
	R6_expected[3] = 1'bX;
end 
// expected R6[ 2 ]
initial
begin
	R6_expected[2] = 1'bX;
end 
// expected R6[ 1 ]
initial
begin
	R6_expected[1] = 1'bX;
end 
// expected R6[ 0 ]
initial
begin
	R6_expected[0] = 1'bX;
end 
// expected R7[ 15 ]
initial
begin
	R7_expected[15] = 1'bX;
end 
// expected R7[ 14 ]
initial
begin
	R7_expected[14] = 1'bX;
end 
// expected R7[ 13 ]
initial
begin
	R7_expected[13] = 1'bX;
end 
// expected R7[ 12 ]
initial
begin
	R7_expected[12] = 1'bX;
end 
// expected R7[ 11 ]
initial
begin
	R7_expected[11] = 1'bX;
end 
// expected R7[ 10 ]
initial
begin
	R7_expected[10] = 1'bX;
end 
// expected R7[ 9 ]
initial
begin
	R7_expected[9] = 1'bX;
end 
// expected R7[ 8 ]
initial
begin
	R7_expected[8] = 1'bX;
end 
// expected R7[ 7 ]
initial
begin
	R7_expected[7] = 1'bX;
end 
// expected R7[ 6 ]
initial
begin
	R7_expected[6] = 1'bX;
end 
// expected R7[ 5 ]
initial
begin
	R7_expected[5] = 1'bX;
end 
// expected R7[ 4 ]
initial
begin
	R7_expected[4] = 1'bX;
end 
// expected R7[ 3 ]
initial
begin
	R7_expected[3] = 1'bX;
end 
// expected R7[ 2 ]
initial
begin
	R7_expected[2] = 1'bX;
end 
// expected R7[ 1 ]
initial
begin
	R7_expected[1] = 1'bX;
end 
// expected R7[ 0 ]
initial
begin
	R7_expected[0] = 1'bX;
end 

// expected REG_SRC
initial
begin
	REG_SRC_expected = 1'bX;
end 

// expected SH_R_L
initial
begin
	SH_R_L_expected = 1'bX;
end 
// expected SHIFT_BIT[ 3 ]
initial
begin
	SHIFT_BIT_expected[3] = 1'bX;
end 
// expected SHIFT_BIT[ 2 ]
initial
begin
	SHIFT_BIT_expected[2] = 1'bX;
end 
// expected SHIFT_BIT[ 1 ]
initial
begin
	SHIFT_BIT_expected[1] = 1'bX;
end 
// expected SHIFT_BIT[ 0 ]
initial
begin
	SHIFT_BIT_expected[0] = 1'bX;
end 

// expected W_MEM
initial
begin
	W_MEM_expected = 1'bX;
end 

// expected WR_SRC
initial
begin
	WR_SRC_expected = 1'bX;
end 

// expected ZERO
initial
begin
	ZERO_expected = 1'bX;
end 
// generate trigger
always @(ALU_OP_expected or ALU_OP or ALU_SRC_expected or ALU_SRC or EN_MEM_expected or EN_MEM or EN_REG_expected or EN_REG or O_expected or O or OUT_INS_expected or OUT_INS or PC_expected or PC or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or R4_expected or R4 or R5_expected or R5 or R6_expected or R6 or R7_expected or R7 or REG_SRC_expected or REG_SRC or SH_R_L_expected or SH_R_L or SHIFT_BIT_expected or SHIFT_BIT or W_MEM_expected or W_MEM or WR_SRC_expected or WR_SRC or ZERO_expected or ZERO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_OP = %b | expected ALU_SRC = %b | expected EN_MEM = %b | expected EN_REG = %b | expected O = %b | expected OUT_INS = %b | expected PC = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected R4 = %b | expected R5 = %b | expected R6 = %b | expected R7 = %b | expected REG_SRC = %b | expected SH_R_L = %b | expected SHIFT_BIT = %b | expected W_MEM = %b | expected WR_SRC = %b | expected ZERO = %b | ",ALU_OP_expected_prev,ALU_SRC_expected_prev,EN_MEM_expected_prev,EN_REG_expected_prev,O_expected_prev,OUT_INS_expected_prev,PC_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,R4_expected_prev,R5_expected_prev,R6_expected_prev,R7_expected_prev,REG_SRC_expected_prev,SH_R_L_expected_prev,SHIFT_BIT_expected_prev,W_MEM_expected_prev,WR_SRC_expected_prev,ZERO_expected_prev);
	$display("| real ALU_OP = %b | real ALU_SRC = %b | real EN_MEM = %b | real EN_REG = %b | real O = %b | real OUT_INS = %b | real PC = %b | real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | real R4 = %b | real R5 = %b | real R6 = %b | real R7 = %b | real REG_SRC = %b | real SH_R_L = %b | real SHIFT_BIT = %b | real W_MEM = %b | real WR_SRC = %b | real ZERO = %b | ",ALU_OP_prev,ALU_SRC_prev,EN_MEM_prev,EN_REG_prev,O_prev,OUT_INS_prev,PC_prev,R0_prev,R1_prev,R2_prev,R3_prev,R4_prev,R5_prev,R6_prev,R7_prev,REG_SRC_prev,SH_R_L_prev,SHIFT_BIT_prev,W_MEM_prev,WR_SRC_prev,ZERO_prev);
`endif
	if (
		( ALU_OP_expected_prev[0] !== 1'bx ) && ( ALU_OP_prev[0] !== ALU_OP_expected_prev[0] )
		&& ((ALU_OP_expected_prev[0] !== last_ALU_OP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OP_expected_prev);
		$display ("     Real value = %b", ALU_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OP_exp[0] = ALU_OP_expected_prev[0];
	end
	if (
		( ALU_OP_expected_prev[1] !== 1'bx ) && ( ALU_OP_prev[1] !== ALU_OP_expected_prev[1] )
		&& ((ALU_OP_expected_prev[1] !== last_ALU_OP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OP_expected_prev);
		$display ("     Real value = %b", ALU_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OP_exp[1] = ALU_OP_expected_prev[1];
	end
	if (
		( ALU_OP_expected_prev[2] !== 1'bx ) && ( ALU_OP_prev[2] !== ALU_OP_expected_prev[2] )
		&& ((ALU_OP_expected_prev[2] !== last_ALU_OP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OP_expected_prev);
		$display ("     Real value = %b", ALU_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OP_exp[2] = ALU_OP_expected_prev[2];
	end
	if (
		( ALU_SRC_expected_prev !== 1'bx ) && ( ALU_SRC_prev !== ALU_SRC_expected_prev )
		&& ((ALU_SRC_expected_prev !== last_ALU_SRC_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SRC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SRC_expected_prev);
		$display ("     Real value = %b", ALU_SRC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_SRC_exp = ALU_SRC_expected_prev;
	end
	if (
		( EN_MEM_expected_prev !== 1'bx ) && ( EN_MEM_prev !== EN_MEM_expected_prev )
		&& ((EN_MEM_expected_prev !== last_EN_MEM_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_MEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_MEM_expected_prev);
		$display ("     Real value = %b", EN_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EN_MEM_exp = EN_MEM_expected_prev;
	end
	if (
		( EN_REG_expected_prev !== 1'bx ) && ( EN_REG_prev !== EN_REG_expected_prev )
		&& ((EN_REG_expected_prev !== last_EN_REG_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_REG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_REG_expected_prev);
		$display ("     Real value = %b", EN_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EN_REG_exp = EN_REG_expected_prev;
	end
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end
	if (
		( O_expected_prev[8] !== 1'bx ) && ( O_prev[8] !== O_expected_prev[8] )
		&& ((O_expected_prev[8] !== last_O_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[8] = O_expected_prev[8];
	end
	if (
		( O_expected_prev[9] !== 1'bx ) && ( O_prev[9] !== O_expected_prev[9] )
		&& ((O_expected_prev[9] !== last_O_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[9] = O_expected_prev[9];
	end
	if (
		( O_expected_prev[10] !== 1'bx ) && ( O_prev[10] !== O_expected_prev[10] )
		&& ((O_expected_prev[10] !== last_O_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[10] = O_expected_prev[10];
	end
	if (
		( O_expected_prev[11] !== 1'bx ) && ( O_prev[11] !== O_expected_prev[11] )
		&& ((O_expected_prev[11] !== last_O_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[11] = O_expected_prev[11];
	end
	if (
		( O_expected_prev[12] !== 1'bx ) && ( O_prev[12] !== O_expected_prev[12] )
		&& ((O_expected_prev[12] !== last_O_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[12] = O_expected_prev[12];
	end
	if (
		( O_expected_prev[13] !== 1'bx ) && ( O_prev[13] !== O_expected_prev[13] )
		&& ((O_expected_prev[13] !== last_O_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[13] = O_expected_prev[13];
	end
	if (
		( O_expected_prev[14] !== 1'bx ) && ( O_prev[14] !== O_expected_prev[14] )
		&& ((O_expected_prev[14] !== last_O_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[14] = O_expected_prev[14];
	end
	if (
		( O_expected_prev[15] !== 1'bx ) && ( O_prev[15] !== O_expected_prev[15] )
		&& ((O_expected_prev[15] !== last_O_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[15] = O_expected_prev[15];
	end
	if (
		( OUT_INS_expected_prev[0] !== 1'bx ) && ( OUT_INS_prev[0] !== OUT_INS_expected_prev[0] )
		&& ((OUT_INS_expected_prev[0] !== last_OUT_INS_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[0] = OUT_INS_expected_prev[0];
	end
	if (
		( OUT_INS_expected_prev[1] !== 1'bx ) && ( OUT_INS_prev[1] !== OUT_INS_expected_prev[1] )
		&& ((OUT_INS_expected_prev[1] !== last_OUT_INS_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[1] = OUT_INS_expected_prev[1];
	end
	if (
		( OUT_INS_expected_prev[2] !== 1'bx ) && ( OUT_INS_prev[2] !== OUT_INS_expected_prev[2] )
		&& ((OUT_INS_expected_prev[2] !== last_OUT_INS_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[2] = OUT_INS_expected_prev[2];
	end
	if (
		( OUT_INS_expected_prev[3] !== 1'bx ) && ( OUT_INS_prev[3] !== OUT_INS_expected_prev[3] )
		&& ((OUT_INS_expected_prev[3] !== last_OUT_INS_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[3] = OUT_INS_expected_prev[3];
	end
	if (
		( OUT_INS_expected_prev[4] !== 1'bx ) && ( OUT_INS_prev[4] !== OUT_INS_expected_prev[4] )
		&& ((OUT_INS_expected_prev[4] !== last_OUT_INS_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[4] = OUT_INS_expected_prev[4];
	end
	if (
		( OUT_INS_expected_prev[5] !== 1'bx ) && ( OUT_INS_prev[5] !== OUT_INS_expected_prev[5] )
		&& ((OUT_INS_expected_prev[5] !== last_OUT_INS_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[5] = OUT_INS_expected_prev[5];
	end
	if (
		( OUT_INS_expected_prev[6] !== 1'bx ) && ( OUT_INS_prev[6] !== OUT_INS_expected_prev[6] )
		&& ((OUT_INS_expected_prev[6] !== last_OUT_INS_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[6] = OUT_INS_expected_prev[6];
	end
	if (
		( OUT_INS_expected_prev[7] !== 1'bx ) && ( OUT_INS_prev[7] !== OUT_INS_expected_prev[7] )
		&& ((OUT_INS_expected_prev[7] !== last_OUT_INS_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[7] = OUT_INS_expected_prev[7];
	end
	if (
		( OUT_INS_expected_prev[8] !== 1'bx ) && ( OUT_INS_prev[8] !== OUT_INS_expected_prev[8] )
		&& ((OUT_INS_expected_prev[8] !== last_OUT_INS_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[8] = OUT_INS_expected_prev[8];
	end
	if (
		( OUT_INS_expected_prev[9] !== 1'bx ) && ( OUT_INS_prev[9] !== OUT_INS_expected_prev[9] )
		&& ((OUT_INS_expected_prev[9] !== last_OUT_INS_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[9] = OUT_INS_expected_prev[9];
	end
	if (
		( OUT_INS_expected_prev[10] !== 1'bx ) && ( OUT_INS_prev[10] !== OUT_INS_expected_prev[10] )
		&& ((OUT_INS_expected_prev[10] !== last_OUT_INS_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[10] = OUT_INS_expected_prev[10];
	end
	if (
		( OUT_INS_expected_prev[11] !== 1'bx ) && ( OUT_INS_prev[11] !== OUT_INS_expected_prev[11] )
		&& ((OUT_INS_expected_prev[11] !== last_OUT_INS_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[11] = OUT_INS_expected_prev[11];
	end
	if (
		( OUT_INS_expected_prev[12] !== 1'bx ) && ( OUT_INS_prev[12] !== OUT_INS_expected_prev[12] )
		&& ((OUT_INS_expected_prev[12] !== last_OUT_INS_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[12] = OUT_INS_expected_prev[12];
	end
	if (
		( OUT_INS_expected_prev[13] !== 1'bx ) && ( OUT_INS_prev[13] !== OUT_INS_expected_prev[13] )
		&& ((OUT_INS_expected_prev[13] !== last_OUT_INS_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[13] = OUT_INS_expected_prev[13];
	end
	if (
		( OUT_INS_expected_prev[14] !== 1'bx ) && ( OUT_INS_prev[14] !== OUT_INS_expected_prev[14] )
		&& ((OUT_INS_expected_prev[14] !== last_OUT_INS_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[14] = OUT_INS_expected_prev[14];
	end
	if (
		( OUT_INS_expected_prev[15] !== 1'bx ) && ( OUT_INS_prev[15] !== OUT_INS_expected_prev[15] )
		&& ((OUT_INS_expected_prev[15] !== last_OUT_INS_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_INS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_INS_expected_prev);
		$display ("     Real value = %b", OUT_INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_INS_exp[15] = OUT_INS_expected_prev[15];
	end
	if (
		( PC_expected_prev !== 1'bx ) && ( PC_prev !== PC_expected_prev )
		&& ((PC_expected_prev !== last_PC_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_exp = PC_expected_prev;
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R0_expected_prev[8] !== 1'bx ) && ( R0_prev[8] !== R0_expected_prev[8] )
		&& ((R0_expected_prev[8] !== last_R0_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[8] = R0_expected_prev[8];
	end
	if (
		( R0_expected_prev[9] !== 1'bx ) && ( R0_prev[9] !== R0_expected_prev[9] )
		&& ((R0_expected_prev[9] !== last_R0_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[9] = R0_expected_prev[9];
	end
	if (
		( R0_expected_prev[10] !== 1'bx ) && ( R0_prev[10] !== R0_expected_prev[10] )
		&& ((R0_expected_prev[10] !== last_R0_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[10] = R0_expected_prev[10];
	end
	if (
		( R0_expected_prev[11] !== 1'bx ) && ( R0_prev[11] !== R0_expected_prev[11] )
		&& ((R0_expected_prev[11] !== last_R0_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[11] = R0_expected_prev[11];
	end
	if (
		( R0_expected_prev[12] !== 1'bx ) && ( R0_prev[12] !== R0_expected_prev[12] )
		&& ((R0_expected_prev[12] !== last_R0_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[12] = R0_expected_prev[12];
	end
	if (
		( R0_expected_prev[13] !== 1'bx ) && ( R0_prev[13] !== R0_expected_prev[13] )
		&& ((R0_expected_prev[13] !== last_R0_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[13] = R0_expected_prev[13];
	end
	if (
		( R0_expected_prev[14] !== 1'bx ) && ( R0_prev[14] !== R0_expected_prev[14] )
		&& ((R0_expected_prev[14] !== last_R0_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[14] = R0_expected_prev[14];
	end
	if (
		( R0_expected_prev[15] !== 1'bx ) && ( R0_prev[15] !== R0_expected_prev[15] )
		&& ((R0_expected_prev[15] !== last_R0_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_exp[15] = R0_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R1_expected_prev[8] !== 1'bx ) && ( R1_prev[8] !== R1_expected_prev[8] )
		&& ((R1_expected_prev[8] !== last_R1_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[8] = R1_expected_prev[8];
	end
	if (
		( R1_expected_prev[9] !== 1'bx ) && ( R1_prev[9] !== R1_expected_prev[9] )
		&& ((R1_expected_prev[9] !== last_R1_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[9] = R1_expected_prev[9];
	end
	if (
		( R1_expected_prev[10] !== 1'bx ) && ( R1_prev[10] !== R1_expected_prev[10] )
		&& ((R1_expected_prev[10] !== last_R1_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[10] = R1_expected_prev[10];
	end
	if (
		( R1_expected_prev[11] !== 1'bx ) && ( R1_prev[11] !== R1_expected_prev[11] )
		&& ((R1_expected_prev[11] !== last_R1_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[11] = R1_expected_prev[11];
	end
	if (
		( R1_expected_prev[12] !== 1'bx ) && ( R1_prev[12] !== R1_expected_prev[12] )
		&& ((R1_expected_prev[12] !== last_R1_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[12] = R1_expected_prev[12];
	end
	if (
		( R1_expected_prev[13] !== 1'bx ) && ( R1_prev[13] !== R1_expected_prev[13] )
		&& ((R1_expected_prev[13] !== last_R1_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[13] = R1_expected_prev[13];
	end
	if (
		( R1_expected_prev[14] !== 1'bx ) && ( R1_prev[14] !== R1_expected_prev[14] )
		&& ((R1_expected_prev[14] !== last_R1_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[14] = R1_expected_prev[14];
	end
	if (
		( R1_expected_prev[15] !== 1'bx ) && ( R1_prev[15] !== R1_expected_prev[15] )
		&& ((R1_expected_prev[15] !== last_R1_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_exp[15] = R1_expected_prev[15];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R2_expected_prev[8] !== 1'bx ) && ( R2_prev[8] !== R2_expected_prev[8] )
		&& ((R2_expected_prev[8] !== last_R2_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[8] = R2_expected_prev[8];
	end
	if (
		( R2_expected_prev[9] !== 1'bx ) && ( R2_prev[9] !== R2_expected_prev[9] )
		&& ((R2_expected_prev[9] !== last_R2_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[9] = R2_expected_prev[9];
	end
	if (
		( R2_expected_prev[10] !== 1'bx ) && ( R2_prev[10] !== R2_expected_prev[10] )
		&& ((R2_expected_prev[10] !== last_R2_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[10] = R2_expected_prev[10];
	end
	if (
		( R2_expected_prev[11] !== 1'bx ) && ( R2_prev[11] !== R2_expected_prev[11] )
		&& ((R2_expected_prev[11] !== last_R2_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[11] = R2_expected_prev[11];
	end
	if (
		( R2_expected_prev[12] !== 1'bx ) && ( R2_prev[12] !== R2_expected_prev[12] )
		&& ((R2_expected_prev[12] !== last_R2_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[12] = R2_expected_prev[12];
	end
	if (
		( R2_expected_prev[13] !== 1'bx ) && ( R2_prev[13] !== R2_expected_prev[13] )
		&& ((R2_expected_prev[13] !== last_R2_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[13] = R2_expected_prev[13];
	end
	if (
		( R2_expected_prev[14] !== 1'bx ) && ( R2_prev[14] !== R2_expected_prev[14] )
		&& ((R2_expected_prev[14] !== last_R2_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[14] = R2_expected_prev[14];
	end
	if (
		( R2_expected_prev[15] !== 1'bx ) && ( R2_prev[15] !== R2_expected_prev[15] )
		&& ((R2_expected_prev[15] !== last_R2_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_exp[15] = R2_expected_prev[15];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end
	if (
		( R3_expected_prev[8] !== 1'bx ) && ( R3_prev[8] !== R3_expected_prev[8] )
		&& ((R3_expected_prev[8] !== last_R3_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[8] = R3_expected_prev[8];
	end
	if (
		( R3_expected_prev[9] !== 1'bx ) && ( R3_prev[9] !== R3_expected_prev[9] )
		&& ((R3_expected_prev[9] !== last_R3_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[9] = R3_expected_prev[9];
	end
	if (
		( R3_expected_prev[10] !== 1'bx ) && ( R3_prev[10] !== R3_expected_prev[10] )
		&& ((R3_expected_prev[10] !== last_R3_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[10] = R3_expected_prev[10];
	end
	if (
		( R3_expected_prev[11] !== 1'bx ) && ( R3_prev[11] !== R3_expected_prev[11] )
		&& ((R3_expected_prev[11] !== last_R3_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[11] = R3_expected_prev[11];
	end
	if (
		( R3_expected_prev[12] !== 1'bx ) && ( R3_prev[12] !== R3_expected_prev[12] )
		&& ((R3_expected_prev[12] !== last_R3_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[12] = R3_expected_prev[12];
	end
	if (
		( R3_expected_prev[13] !== 1'bx ) && ( R3_prev[13] !== R3_expected_prev[13] )
		&& ((R3_expected_prev[13] !== last_R3_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[13] = R3_expected_prev[13];
	end
	if (
		( R3_expected_prev[14] !== 1'bx ) && ( R3_prev[14] !== R3_expected_prev[14] )
		&& ((R3_expected_prev[14] !== last_R3_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[14] = R3_expected_prev[14];
	end
	if (
		( R3_expected_prev[15] !== 1'bx ) && ( R3_prev[15] !== R3_expected_prev[15] )
		&& ((R3_expected_prev[15] !== last_R3_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R3_exp[15] = R3_expected_prev[15];
	end
	if (
		( R4_expected_prev[0] !== 1'bx ) && ( R4_prev[0] !== R4_expected_prev[0] )
		&& ((R4_expected_prev[0] !== last_R4_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[0] = R4_expected_prev[0];
	end
	if (
		( R4_expected_prev[1] !== 1'bx ) && ( R4_prev[1] !== R4_expected_prev[1] )
		&& ((R4_expected_prev[1] !== last_R4_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[1] = R4_expected_prev[1];
	end
	if (
		( R4_expected_prev[2] !== 1'bx ) && ( R4_prev[2] !== R4_expected_prev[2] )
		&& ((R4_expected_prev[2] !== last_R4_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[2] = R4_expected_prev[2];
	end
	if (
		( R4_expected_prev[3] !== 1'bx ) && ( R4_prev[3] !== R4_expected_prev[3] )
		&& ((R4_expected_prev[3] !== last_R4_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[3] = R4_expected_prev[3];
	end
	if (
		( R4_expected_prev[4] !== 1'bx ) && ( R4_prev[4] !== R4_expected_prev[4] )
		&& ((R4_expected_prev[4] !== last_R4_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[4] = R4_expected_prev[4];
	end
	if (
		( R4_expected_prev[5] !== 1'bx ) && ( R4_prev[5] !== R4_expected_prev[5] )
		&& ((R4_expected_prev[5] !== last_R4_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[5] = R4_expected_prev[5];
	end
	if (
		( R4_expected_prev[6] !== 1'bx ) && ( R4_prev[6] !== R4_expected_prev[6] )
		&& ((R4_expected_prev[6] !== last_R4_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[6] = R4_expected_prev[6];
	end
	if (
		( R4_expected_prev[7] !== 1'bx ) && ( R4_prev[7] !== R4_expected_prev[7] )
		&& ((R4_expected_prev[7] !== last_R4_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[7] = R4_expected_prev[7];
	end
	if (
		( R4_expected_prev[8] !== 1'bx ) && ( R4_prev[8] !== R4_expected_prev[8] )
		&& ((R4_expected_prev[8] !== last_R4_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[8] = R4_expected_prev[8];
	end
	if (
		( R4_expected_prev[9] !== 1'bx ) && ( R4_prev[9] !== R4_expected_prev[9] )
		&& ((R4_expected_prev[9] !== last_R4_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[9] = R4_expected_prev[9];
	end
	if (
		( R4_expected_prev[10] !== 1'bx ) && ( R4_prev[10] !== R4_expected_prev[10] )
		&& ((R4_expected_prev[10] !== last_R4_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[10] = R4_expected_prev[10];
	end
	if (
		( R4_expected_prev[11] !== 1'bx ) && ( R4_prev[11] !== R4_expected_prev[11] )
		&& ((R4_expected_prev[11] !== last_R4_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[11] = R4_expected_prev[11];
	end
	if (
		( R4_expected_prev[12] !== 1'bx ) && ( R4_prev[12] !== R4_expected_prev[12] )
		&& ((R4_expected_prev[12] !== last_R4_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[12] = R4_expected_prev[12];
	end
	if (
		( R4_expected_prev[13] !== 1'bx ) && ( R4_prev[13] !== R4_expected_prev[13] )
		&& ((R4_expected_prev[13] !== last_R4_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[13] = R4_expected_prev[13];
	end
	if (
		( R4_expected_prev[14] !== 1'bx ) && ( R4_prev[14] !== R4_expected_prev[14] )
		&& ((R4_expected_prev[14] !== last_R4_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[14] = R4_expected_prev[14];
	end
	if (
		( R4_expected_prev[15] !== 1'bx ) && ( R4_prev[15] !== R4_expected_prev[15] )
		&& ((R4_expected_prev[15] !== last_R4_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R4_exp[15] = R4_expected_prev[15];
	end
	if (
		( R5_expected_prev[0] !== 1'bx ) && ( R5_prev[0] !== R5_expected_prev[0] )
		&& ((R5_expected_prev[0] !== last_R5_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[0] = R5_expected_prev[0];
	end
	if (
		( R5_expected_prev[1] !== 1'bx ) && ( R5_prev[1] !== R5_expected_prev[1] )
		&& ((R5_expected_prev[1] !== last_R5_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[1] = R5_expected_prev[1];
	end
	if (
		( R5_expected_prev[2] !== 1'bx ) && ( R5_prev[2] !== R5_expected_prev[2] )
		&& ((R5_expected_prev[2] !== last_R5_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[2] = R5_expected_prev[2];
	end
	if (
		( R5_expected_prev[3] !== 1'bx ) && ( R5_prev[3] !== R5_expected_prev[3] )
		&& ((R5_expected_prev[3] !== last_R5_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[3] = R5_expected_prev[3];
	end
	if (
		( R5_expected_prev[4] !== 1'bx ) && ( R5_prev[4] !== R5_expected_prev[4] )
		&& ((R5_expected_prev[4] !== last_R5_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[4] = R5_expected_prev[4];
	end
	if (
		( R5_expected_prev[5] !== 1'bx ) && ( R5_prev[5] !== R5_expected_prev[5] )
		&& ((R5_expected_prev[5] !== last_R5_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[5] = R5_expected_prev[5];
	end
	if (
		( R5_expected_prev[6] !== 1'bx ) && ( R5_prev[6] !== R5_expected_prev[6] )
		&& ((R5_expected_prev[6] !== last_R5_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[6] = R5_expected_prev[6];
	end
	if (
		( R5_expected_prev[7] !== 1'bx ) && ( R5_prev[7] !== R5_expected_prev[7] )
		&& ((R5_expected_prev[7] !== last_R5_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[7] = R5_expected_prev[7];
	end
	if (
		( R5_expected_prev[8] !== 1'bx ) && ( R5_prev[8] !== R5_expected_prev[8] )
		&& ((R5_expected_prev[8] !== last_R5_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[8] = R5_expected_prev[8];
	end
	if (
		( R5_expected_prev[9] !== 1'bx ) && ( R5_prev[9] !== R5_expected_prev[9] )
		&& ((R5_expected_prev[9] !== last_R5_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[9] = R5_expected_prev[9];
	end
	if (
		( R5_expected_prev[10] !== 1'bx ) && ( R5_prev[10] !== R5_expected_prev[10] )
		&& ((R5_expected_prev[10] !== last_R5_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[10] = R5_expected_prev[10];
	end
	if (
		( R5_expected_prev[11] !== 1'bx ) && ( R5_prev[11] !== R5_expected_prev[11] )
		&& ((R5_expected_prev[11] !== last_R5_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[11] = R5_expected_prev[11];
	end
	if (
		( R5_expected_prev[12] !== 1'bx ) && ( R5_prev[12] !== R5_expected_prev[12] )
		&& ((R5_expected_prev[12] !== last_R5_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[12] = R5_expected_prev[12];
	end
	if (
		( R5_expected_prev[13] !== 1'bx ) && ( R5_prev[13] !== R5_expected_prev[13] )
		&& ((R5_expected_prev[13] !== last_R5_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[13] = R5_expected_prev[13];
	end
	if (
		( R5_expected_prev[14] !== 1'bx ) && ( R5_prev[14] !== R5_expected_prev[14] )
		&& ((R5_expected_prev[14] !== last_R5_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[14] = R5_expected_prev[14];
	end
	if (
		( R5_expected_prev[15] !== 1'bx ) && ( R5_prev[15] !== R5_expected_prev[15] )
		&& ((R5_expected_prev[15] !== last_R5_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R5_exp[15] = R5_expected_prev[15];
	end
	if (
		( R6_expected_prev[0] !== 1'bx ) && ( R6_prev[0] !== R6_expected_prev[0] )
		&& ((R6_expected_prev[0] !== last_R6_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[0] = R6_expected_prev[0];
	end
	if (
		( R6_expected_prev[1] !== 1'bx ) && ( R6_prev[1] !== R6_expected_prev[1] )
		&& ((R6_expected_prev[1] !== last_R6_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[1] = R6_expected_prev[1];
	end
	if (
		( R6_expected_prev[2] !== 1'bx ) && ( R6_prev[2] !== R6_expected_prev[2] )
		&& ((R6_expected_prev[2] !== last_R6_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[2] = R6_expected_prev[2];
	end
	if (
		( R6_expected_prev[3] !== 1'bx ) && ( R6_prev[3] !== R6_expected_prev[3] )
		&& ((R6_expected_prev[3] !== last_R6_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[3] = R6_expected_prev[3];
	end
	if (
		( R6_expected_prev[4] !== 1'bx ) && ( R6_prev[4] !== R6_expected_prev[4] )
		&& ((R6_expected_prev[4] !== last_R6_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[4] = R6_expected_prev[4];
	end
	if (
		( R6_expected_prev[5] !== 1'bx ) && ( R6_prev[5] !== R6_expected_prev[5] )
		&& ((R6_expected_prev[5] !== last_R6_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[5] = R6_expected_prev[5];
	end
	if (
		( R6_expected_prev[6] !== 1'bx ) && ( R6_prev[6] !== R6_expected_prev[6] )
		&& ((R6_expected_prev[6] !== last_R6_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[6] = R6_expected_prev[6];
	end
	if (
		( R6_expected_prev[7] !== 1'bx ) && ( R6_prev[7] !== R6_expected_prev[7] )
		&& ((R6_expected_prev[7] !== last_R6_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[7] = R6_expected_prev[7];
	end
	if (
		( R6_expected_prev[8] !== 1'bx ) && ( R6_prev[8] !== R6_expected_prev[8] )
		&& ((R6_expected_prev[8] !== last_R6_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[8] = R6_expected_prev[8];
	end
	if (
		( R6_expected_prev[9] !== 1'bx ) && ( R6_prev[9] !== R6_expected_prev[9] )
		&& ((R6_expected_prev[9] !== last_R6_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[9] = R6_expected_prev[9];
	end
	if (
		( R6_expected_prev[10] !== 1'bx ) && ( R6_prev[10] !== R6_expected_prev[10] )
		&& ((R6_expected_prev[10] !== last_R6_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[10] = R6_expected_prev[10];
	end
	if (
		( R6_expected_prev[11] !== 1'bx ) && ( R6_prev[11] !== R6_expected_prev[11] )
		&& ((R6_expected_prev[11] !== last_R6_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[11] = R6_expected_prev[11];
	end
	if (
		( R6_expected_prev[12] !== 1'bx ) && ( R6_prev[12] !== R6_expected_prev[12] )
		&& ((R6_expected_prev[12] !== last_R6_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[12] = R6_expected_prev[12];
	end
	if (
		( R6_expected_prev[13] !== 1'bx ) && ( R6_prev[13] !== R6_expected_prev[13] )
		&& ((R6_expected_prev[13] !== last_R6_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[13] = R6_expected_prev[13];
	end
	if (
		( R6_expected_prev[14] !== 1'bx ) && ( R6_prev[14] !== R6_expected_prev[14] )
		&& ((R6_expected_prev[14] !== last_R6_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[14] = R6_expected_prev[14];
	end
	if (
		( R6_expected_prev[15] !== 1'bx ) && ( R6_prev[15] !== R6_expected_prev[15] )
		&& ((R6_expected_prev[15] !== last_R6_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R6_exp[15] = R6_expected_prev[15];
	end
	if (
		( R7_expected_prev[0] !== 1'bx ) && ( R7_prev[0] !== R7_expected_prev[0] )
		&& ((R7_expected_prev[0] !== last_R7_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[0] = R7_expected_prev[0];
	end
	if (
		( R7_expected_prev[1] !== 1'bx ) && ( R7_prev[1] !== R7_expected_prev[1] )
		&& ((R7_expected_prev[1] !== last_R7_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[1] = R7_expected_prev[1];
	end
	if (
		( R7_expected_prev[2] !== 1'bx ) && ( R7_prev[2] !== R7_expected_prev[2] )
		&& ((R7_expected_prev[2] !== last_R7_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[2] = R7_expected_prev[2];
	end
	if (
		( R7_expected_prev[3] !== 1'bx ) && ( R7_prev[3] !== R7_expected_prev[3] )
		&& ((R7_expected_prev[3] !== last_R7_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[3] = R7_expected_prev[3];
	end
	if (
		( R7_expected_prev[4] !== 1'bx ) && ( R7_prev[4] !== R7_expected_prev[4] )
		&& ((R7_expected_prev[4] !== last_R7_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[4] = R7_expected_prev[4];
	end
	if (
		( R7_expected_prev[5] !== 1'bx ) && ( R7_prev[5] !== R7_expected_prev[5] )
		&& ((R7_expected_prev[5] !== last_R7_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[5] = R7_expected_prev[5];
	end
	if (
		( R7_expected_prev[6] !== 1'bx ) && ( R7_prev[6] !== R7_expected_prev[6] )
		&& ((R7_expected_prev[6] !== last_R7_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[6] = R7_expected_prev[6];
	end
	if (
		( R7_expected_prev[7] !== 1'bx ) && ( R7_prev[7] !== R7_expected_prev[7] )
		&& ((R7_expected_prev[7] !== last_R7_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[7] = R7_expected_prev[7];
	end
	if (
		( R7_expected_prev[8] !== 1'bx ) && ( R7_prev[8] !== R7_expected_prev[8] )
		&& ((R7_expected_prev[8] !== last_R7_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[8] = R7_expected_prev[8];
	end
	if (
		( R7_expected_prev[9] !== 1'bx ) && ( R7_prev[9] !== R7_expected_prev[9] )
		&& ((R7_expected_prev[9] !== last_R7_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[9] = R7_expected_prev[9];
	end
	if (
		( R7_expected_prev[10] !== 1'bx ) && ( R7_prev[10] !== R7_expected_prev[10] )
		&& ((R7_expected_prev[10] !== last_R7_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[10] = R7_expected_prev[10];
	end
	if (
		( R7_expected_prev[11] !== 1'bx ) && ( R7_prev[11] !== R7_expected_prev[11] )
		&& ((R7_expected_prev[11] !== last_R7_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[11] = R7_expected_prev[11];
	end
	if (
		( R7_expected_prev[12] !== 1'bx ) && ( R7_prev[12] !== R7_expected_prev[12] )
		&& ((R7_expected_prev[12] !== last_R7_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[12] = R7_expected_prev[12];
	end
	if (
		( R7_expected_prev[13] !== 1'bx ) && ( R7_prev[13] !== R7_expected_prev[13] )
		&& ((R7_expected_prev[13] !== last_R7_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[13] = R7_expected_prev[13];
	end
	if (
		( R7_expected_prev[14] !== 1'bx ) && ( R7_prev[14] !== R7_expected_prev[14] )
		&& ((R7_expected_prev[14] !== last_R7_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[14] = R7_expected_prev[14];
	end
	if (
		( R7_expected_prev[15] !== 1'bx ) && ( R7_prev[15] !== R7_expected_prev[15] )
		&& ((R7_expected_prev[15] !== last_R7_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R7_exp[15] = R7_expected_prev[15];
	end
	if (
		( REG_SRC_expected_prev !== 1'bx ) && ( REG_SRC_prev !== REG_SRC_expected_prev )
		&& ((REG_SRC_expected_prev !== last_REG_SRC_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SRC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SRC_expected_prev);
		$display ("     Real value = %b", REG_SRC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_REG_SRC_exp = REG_SRC_expected_prev;
	end
	if (
		( SH_R_L_expected_prev !== 1'bx ) && ( SH_R_L_prev !== SH_R_L_expected_prev )
		&& ((SH_R_L_expected_prev !== last_SH_R_L_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SH_R_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SH_R_L_expected_prev);
		$display ("     Real value = %b", SH_R_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_SH_R_L_exp = SH_R_L_expected_prev;
	end
	if (
		( SHIFT_BIT_expected_prev[0] !== 1'bx ) && ( SHIFT_BIT_prev[0] !== SHIFT_BIT_expected_prev[0] )
		&& ((SHIFT_BIT_expected_prev[0] !== last_SHIFT_BIT_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHIFT_BIT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHIFT_BIT_expected_prev);
		$display ("     Real value = %b", SHIFT_BIT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SHIFT_BIT_exp[0] = SHIFT_BIT_expected_prev[0];
	end
	if (
		( SHIFT_BIT_expected_prev[1] !== 1'bx ) && ( SHIFT_BIT_prev[1] !== SHIFT_BIT_expected_prev[1] )
		&& ((SHIFT_BIT_expected_prev[1] !== last_SHIFT_BIT_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHIFT_BIT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHIFT_BIT_expected_prev);
		$display ("     Real value = %b", SHIFT_BIT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SHIFT_BIT_exp[1] = SHIFT_BIT_expected_prev[1];
	end
	if (
		( SHIFT_BIT_expected_prev[2] !== 1'bx ) && ( SHIFT_BIT_prev[2] !== SHIFT_BIT_expected_prev[2] )
		&& ((SHIFT_BIT_expected_prev[2] !== last_SHIFT_BIT_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHIFT_BIT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHIFT_BIT_expected_prev);
		$display ("     Real value = %b", SHIFT_BIT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SHIFT_BIT_exp[2] = SHIFT_BIT_expected_prev[2];
	end
	if (
		( SHIFT_BIT_expected_prev[3] !== 1'bx ) && ( SHIFT_BIT_prev[3] !== SHIFT_BIT_expected_prev[3] )
		&& ((SHIFT_BIT_expected_prev[3] !== last_SHIFT_BIT_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHIFT_BIT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHIFT_BIT_expected_prev);
		$display ("     Real value = %b", SHIFT_BIT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SHIFT_BIT_exp[3] = SHIFT_BIT_expected_prev[3];
	end
	if (
		( W_MEM_expected_prev !== 1'bx ) && ( W_MEM_prev !== W_MEM_expected_prev )
		&& ((W_MEM_expected_prev !== last_W_MEM_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_MEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_MEM_expected_prev);
		$display ("     Real value = %b", W_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_W_MEM_exp = W_MEM_expected_prev;
	end
	if (
		( WR_SRC_expected_prev !== 1'bx ) && ( WR_SRC_prev !== WR_SRC_expected_prev )
		&& ((WR_SRC_expected_prev !== last_WR_SRC_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR_SRC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_SRC_expected_prev);
		$display ("     Real value = %b", WR_SRC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_WR_SRC_exp = WR_SRC_expected_prev;
	end
	if (
		( ZERO_expected_prev !== 1'bx ) && ( ZERO_prev !== ZERO_expected_prev )
		&& ((ZERO_expected_prev !== last_ZERO_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZERO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZERO_expected_prev);
		$display ("     Real value = %b", ZERO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ZERO_exp = ZERO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TEST_RISC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire [2:0] ALU_OP;
wire ALU_SRC;
wire EN_MEM;
wire EN_REG;
wire [15:0] O;
wire [15:0] OUT_INS;
wire PC;
wire [15:0] R0;
wire [15:0] R1;
wire [15:0] R2;
wire [15:0] R3;
wire [15:0] R4;
wire [15:0] R5;
wire [15:0] R6;
wire [15:0] R7;
wire REG_SRC;
wire SH_R_L;
wire [3:0] SHIFT_BIT;
wire W_MEM;
wire WR_SRC;
wire ZERO;

wire sampler;                             

// assign statements (if any)                          
TEST_RISC i1 (
// port map - connection between master ports and signals/registers   
	.ALU_OP(ALU_OP),
	.ALU_SRC(ALU_SRC),
	.CLK(CLK),
	.EN_MEM(EN_MEM),
	.EN_REG(EN_REG),
	.O(O),
	.OUT_INS(OUT_INS),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.R6(R6),
	.R7(R7),
	.REG_SRC(REG_SRC),
	.SH_R_L(SH_R_L),
	.SHIFT_BIT(SHIFT_BIT),
	.W_MEM(W_MEM),
	.WR_SRC(WR_SRC),
	.ZERO(ZERO)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

TEST_RISC_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

TEST_RISC_vlg_check_tst tb_out(
	.ALU_OP(ALU_OP),
	.ALU_SRC(ALU_SRC),
	.EN_MEM(EN_MEM),
	.EN_REG(EN_REG),
	.O(O),
	.OUT_INS(OUT_INS),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.R6(R6),
	.R7(R7),
	.REG_SRC(REG_SRC),
	.SH_R_L(SH_R_L),
	.SHIFT_BIT(SHIFT_BIT),
	.W_MEM(W_MEM),
	.WR_SRC(WR_SRC),
	.ZERO(ZERO),
	.sampler_rx(sampler)
);
endmodule

