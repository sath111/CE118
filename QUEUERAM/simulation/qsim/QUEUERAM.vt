// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2024 10:45:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    QUEUERAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module QUEUERAM_vlg_sample_tst(
	CLK,
	EN,
	IN,
	POP,
	sampler_tx
);
input  CLK;
input  EN;
input [7:0] IN;
input  POP;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or EN or IN or POP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module QUEUERAM_vlg_check_tst (
	A,
	B,
	EMPTY,
	FULL,
	O,
	sampler_rx
);
input [4:0] A;
input [4:0] B;
input  EMPTY;
input  FULL;
input [7:0] O;
input sampler_rx;

reg [4:0] A_expected;
reg [4:0] B_expected;
reg  EMPTY_expected;
reg  FULL_expected;
reg [7:0] O_expected;

reg [4:0] A_prev;
reg [4:0] B_prev;
reg  EMPTY_prev;
reg  FULL_prev;
reg [7:0] O_prev;

reg [4:0] A_expected_prev;
reg [4:0] B_expected_prev;
reg  EMPTY_expected_prev;
reg  FULL_expected_prev;
reg [7:0] O_expected_prev;

reg [4:0] last_A_exp;
reg [4:0] last_B_exp;
reg  last_EMPTY_exp;
reg  last_FULL_exp;
reg [7:0] last_O_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	EMPTY_prev = EMPTY;
	FULL_prev = FULL;
	O_prev = O;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	EMPTY_expected_prev = EMPTY_expected;
	FULL_expected_prev = FULL_expected;
	O_expected_prev = O_expected;
end


// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 

// expected EMPTY
initial
begin
	EMPTY_expected = 1'bX;
end 

// expected FULL
initial
begin
	FULL_expected = 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or EMPTY_expected or EMPTY or FULL_expected or FULL or O_expected or O)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected EMPTY = %b | expected FULL = %b | expected O = %b | ",A_expected_prev,B_expected_prev,EMPTY_expected_prev,FULL_expected_prev,O_expected_prev);
	$display("| real A = %b | real B = %b | real EMPTY = %b | real FULL = %b | real O = %b | ",A_prev,B_prev,EMPTY_prev,FULL_prev,O_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( EMPTY_expected_prev !== 1'bx ) && ( EMPTY_prev !== EMPTY_expected_prev )
		&& ((EMPTY_expected_prev !== last_EMPTY_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EMPTY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EMPTY_expected_prev);
		$display ("     Real value = %b", EMPTY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EMPTY_exp = EMPTY_expected_prev;
	end
	if (
		( FULL_expected_prev !== 1'bx ) && ( FULL_prev !== FULL_expected_prev )
		&& ((FULL_expected_prev !== last_FULL_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FULL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FULL_expected_prev);
		$display ("     Real value = %b", FULL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_FULL_exp = FULL_expected_prev;
	end
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module QUEUERAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EN;
reg [7:0] IN;
reg POP;
// wires                                               
wire [4:0] A;
wire [4:0] B;
wire EMPTY;
wire FULL;
wire [7:0] O;

wire sampler;                             

// assign statements (if any)                          
QUEUERAM i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.EMPTY(EMPTY),
	.EN(EN),
	.FULL(FULL),
	.IN(IN),
	.O(O),
	.POP(POP)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #60000 1'b1;
	# 20000;
	repeat(23)
	begin
		CLK = 1'b0;
		CLK = #20000 1'b1;
		# 20000;
	end
end 

// EN
initial
begin
	EN = 1'b0;
	EN = #50000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #60000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
	EN = #20000 1'b1;
	EN = #20000 1'b0;
end 
// IN[ 7 ]
initial
begin
	IN[7] = 1'b0;
	IN[7] = #90000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #100000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
end 
// IN[ 6 ]
initial
begin
	IN[6] = 1'b0;
	IN[6] = #130000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
end 
// IN[ 5 ]
initial
begin
	IN[5] = 1'b0;
	IN[5] = #130000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
end 
// IN[ 4 ]
initial
begin
	IN[4] = 1'b0;
	IN[4] = #130000 1'b1;
	IN[4] = #20000 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #20000 1'b0;
	IN[4] = #100000 1'b1;
	IN[4] = #20000 1'b0;
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b0;
	IN[3] = #50000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #60000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #60000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #20000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #20000 1'b1;
	IN[3] = #20000 1'b0;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b0;
	IN[2] = #50000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #180000 1'b1;
	IN[2] = #20000 1'b0;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b0;
	IN[1] = #130000 1'b1;
	IN[1] = #20000 1'b0;
	IN[1] = #60000 1'b1;
	IN[1] = #20000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #20000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #20000 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b0;
	IN[0] = #50000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #60000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #20000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #60000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #20000 1'b1;
	IN[0] = #20000 1'b0;
end 

// POP
initial
begin
	POP = 1'b0;
	POP = #50000 1'b1;
	POP = #20000 1'b0;
	POP = #20000 1'b1;
	POP = #20000 1'b0;
	POP = #20000 1'b1;
	POP = #20000 1'b0;
	POP = #20000 1'b1;
	POP = #20000 1'b0;
	POP = #20000 1'b1;
	POP = #20000 1'b0;
	POP = #20000 1'b1;
	POP = #20000 1'b0;
	POP = #20000 1'b1;
	POP = #20000 1'b0;
end 

QUEUERAM_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.EN(EN),
	.IN(IN),
	.POP(POP),
	.sampler_tx(sampler)
);

QUEUERAM_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.EMPTY(EMPTY),
	.FULL(FULL),
	.O(O),
	.sampler_rx(sampler)
);
endmodule

