// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2024 01:45:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SRA_MR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SRA_MR_vlg_sample_tst(
	A,
	B,
	CLK,
	RST,
	START,
	sampler_tx
);
input [15:0] A;
input [15:0] B;
input  CLK;
input  RST;
input  START;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLK or RST or START)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SRA_MR_vlg_check_tst (
	DONE,
	OUTPU,
	sampler_rx
);
input  DONE;
input [15:0] OUTPU;
input sampler_rx;

reg  DONE_expected;
reg [15:0] OUTPU_expected;

reg  DONE_prev;
reg [15:0] OUTPU_prev;

reg  DONE_expected_prev;
reg [15:0] OUTPU_expected_prev;

reg  last_DONE_exp;
reg [15:0] last_OUTPU_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DONE_prev = DONE;
	OUTPU_prev = OUTPU;
end

// update expected /o prevs

always @(trigger)
begin
	DONE_expected_prev = DONE_expected;
	OUTPU_expected_prev = OUTPU_expected;
end



// expected DONE
initial
begin
	DONE_expected = 1'bX;
end 
// expected OUTPU[ 15 ]
initial
begin
	OUTPU_expected[15] = 1'bX;
end 
// expected OUTPU[ 14 ]
initial
begin
	OUTPU_expected[14] = 1'bX;
end 
// expected OUTPU[ 13 ]
initial
begin
	OUTPU_expected[13] = 1'bX;
end 
// expected OUTPU[ 12 ]
initial
begin
	OUTPU_expected[12] = 1'bX;
end 
// expected OUTPU[ 11 ]
initial
begin
	OUTPU_expected[11] = 1'bX;
end 
// expected OUTPU[ 10 ]
initial
begin
	OUTPU_expected[10] = 1'bX;
end 
// expected OUTPU[ 9 ]
initial
begin
	OUTPU_expected[9] = 1'bX;
end 
// expected OUTPU[ 8 ]
initial
begin
	OUTPU_expected[8] = 1'bX;
end 
// expected OUTPU[ 7 ]
initial
begin
	OUTPU_expected[7] = 1'bX;
end 
// expected OUTPU[ 6 ]
initial
begin
	OUTPU_expected[6] = 1'bX;
end 
// expected OUTPU[ 5 ]
initial
begin
	OUTPU_expected[5] = 1'bX;
end 
// expected OUTPU[ 4 ]
initial
begin
	OUTPU_expected[4] = 1'bX;
end 
// expected OUTPU[ 3 ]
initial
begin
	OUTPU_expected[3] = 1'bX;
end 
// expected OUTPU[ 2 ]
initial
begin
	OUTPU_expected[2] = 1'bX;
end 
// expected OUTPU[ 1 ]
initial
begin
	OUTPU_expected[1] = 1'bX;
end 
// expected OUTPU[ 0 ]
initial
begin
	OUTPU_expected[0] = 1'bX;
end 
// generate trigger
always @(DONE_expected or DONE or OUTPU_expected or OUTPU)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DONE = %b | expected OUTPU = %b | ",DONE_expected_prev,OUTPU_expected_prev);
	$display("| real DONE = %b | real OUTPU = %b | ",DONE_prev,OUTPU_prev);
`endif
	if (
		( DONE_expected_prev !== 1'bx ) && ( DONE_prev !== DONE_expected_prev )
		&& ((DONE_expected_prev !== last_DONE_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DONE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DONE_expected_prev);
		$display ("     Real value = %b", DONE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DONE_exp = DONE_expected_prev;
	end
	if (
		( OUTPU_expected_prev[0] !== 1'bx ) && ( OUTPU_prev[0] !== OUTPU_expected_prev[0] )
		&& ((OUTPU_expected_prev[0] !== last_OUTPU_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[0] = OUTPU_expected_prev[0];
	end
	if (
		( OUTPU_expected_prev[1] !== 1'bx ) && ( OUTPU_prev[1] !== OUTPU_expected_prev[1] )
		&& ((OUTPU_expected_prev[1] !== last_OUTPU_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[1] = OUTPU_expected_prev[1];
	end
	if (
		( OUTPU_expected_prev[2] !== 1'bx ) && ( OUTPU_prev[2] !== OUTPU_expected_prev[2] )
		&& ((OUTPU_expected_prev[2] !== last_OUTPU_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[2] = OUTPU_expected_prev[2];
	end
	if (
		( OUTPU_expected_prev[3] !== 1'bx ) && ( OUTPU_prev[3] !== OUTPU_expected_prev[3] )
		&& ((OUTPU_expected_prev[3] !== last_OUTPU_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[3] = OUTPU_expected_prev[3];
	end
	if (
		( OUTPU_expected_prev[4] !== 1'bx ) && ( OUTPU_prev[4] !== OUTPU_expected_prev[4] )
		&& ((OUTPU_expected_prev[4] !== last_OUTPU_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[4] = OUTPU_expected_prev[4];
	end
	if (
		( OUTPU_expected_prev[5] !== 1'bx ) && ( OUTPU_prev[5] !== OUTPU_expected_prev[5] )
		&& ((OUTPU_expected_prev[5] !== last_OUTPU_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[5] = OUTPU_expected_prev[5];
	end
	if (
		( OUTPU_expected_prev[6] !== 1'bx ) && ( OUTPU_prev[6] !== OUTPU_expected_prev[6] )
		&& ((OUTPU_expected_prev[6] !== last_OUTPU_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[6] = OUTPU_expected_prev[6];
	end
	if (
		( OUTPU_expected_prev[7] !== 1'bx ) && ( OUTPU_prev[7] !== OUTPU_expected_prev[7] )
		&& ((OUTPU_expected_prev[7] !== last_OUTPU_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[7] = OUTPU_expected_prev[7];
	end
	if (
		( OUTPU_expected_prev[8] !== 1'bx ) && ( OUTPU_prev[8] !== OUTPU_expected_prev[8] )
		&& ((OUTPU_expected_prev[8] !== last_OUTPU_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[8] = OUTPU_expected_prev[8];
	end
	if (
		( OUTPU_expected_prev[9] !== 1'bx ) && ( OUTPU_prev[9] !== OUTPU_expected_prev[9] )
		&& ((OUTPU_expected_prev[9] !== last_OUTPU_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[9] = OUTPU_expected_prev[9];
	end
	if (
		( OUTPU_expected_prev[10] !== 1'bx ) && ( OUTPU_prev[10] !== OUTPU_expected_prev[10] )
		&& ((OUTPU_expected_prev[10] !== last_OUTPU_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[10] = OUTPU_expected_prev[10];
	end
	if (
		( OUTPU_expected_prev[11] !== 1'bx ) && ( OUTPU_prev[11] !== OUTPU_expected_prev[11] )
		&& ((OUTPU_expected_prev[11] !== last_OUTPU_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[11] = OUTPU_expected_prev[11];
	end
	if (
		( OUTPU_expected_prev[12] !== 1'bx ) && ( OUTPU_prev[12] !== OUTPU_expected_prev[12] )
		&& ((OUTPU_expected_prev[12] !== last_OUTPU_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[12] = OUTPU_expected_prev[12];
	end
	if (
		( OUTPU_expected_prev[13] !== 1'bx ) && ( OUTPU_prev[13] !== OUTPU_expected_prev[13] )
		&& ((OUTPU_expected_prev[13] !== last_OUTPU_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[13] = OUTPU_expected_prev[13];
	end
	if (
		( OUTPU_expected_prev[14] !== 1'bx ) && ( OUTPU_prev[14] !== OUTPU_expected_prev[14] )
		&& ((OUTPU_expected_prev[14] !== last_OUTPU_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[14] = OUTPU_expected_prev[14];
	end
	if (
		( OUTPU_expected_prev[15] !== 1'bx ) && ( OUTPU_prev[15] !== OUTPU_expected_prev[15] )
		&& ((OUTPU_expected_prev[15] !== last_OUTPU_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPU_expected_prev);
		$display ("     Real value = %b", OUTPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPU_exp[15] = OUTPU_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SRA_MR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg CLK;
reg RST;
reg START;
// wires                                               
wire DONE;
wire [15:0] OUTPU;

wire sampler;                             

// assign statements (if any)                          
SRA_MR i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.DONE(DONE),
	.OUTPU(OUTPU),
	.RST(RST),
	.START(START)
);

// CLK
initial
begin
	repeat(16)
	begin
		CLK = 1'b0;
		CLK = #30000 1'b1;
		# 30000;
	end
	CLK = 1'b0;
	CLK = #30000 1'b1;
end 

// START
initial
begin
	START = 1'b0;
	START = #80000 1'b1;
	START = #20000 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// RST
initial
begin
	RST = 1'b1;
end 

SRA_MR_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLK(CLK),
	.RST(RST),
	.START(START),
	.sampler_tx(sampler)
);

SRA_MR_vlg_check_tst tb_out(
	.DONE(DONE),
	.OUTPU(OUTPU),
	.sampler_rx(sampler)
);
endmodule

